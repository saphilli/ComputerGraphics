
#version 330

in vec2 Texcoord;
in vec3 FragPos;
in vec3 Normal;

struct Material {
    sampler2D texture;
    sampler2D specular;
    sampler2D normalMap;
    float shininess;
    float isAlien;
};
struct Light {
    vec3 direction;
    vec3 position;
    float cutOff;
    float outerCutOff;
};

uniform Light light;
uniform Material material;
uniform vec3 viewPos;

vec3 lightAmbient = vec3(0.2,0.2,0.2);
vec3 lightSpecular = vec3 (0.1,0.1, 0.1);
vec3 lightDiffuse = vec3(1,0.8,0.6);
vec3 alienSpecular = vec3(1,0.69,0.4); //gives an orange hue to the aliens specular lighting
vec3 alienAmbient = vec3(0,0,0); //keeps the alien black
float constant = 1.0f;
float linear = 0.14f;
float quadratic = 0.07f;

void main(){
	   //ambient lighting
     vec3 lightDir = normalize(light.position - FragPos);
     vec3 viewDir = normalize(viewPos - FragPos);
     vec3 ambient = lightAmbient * vec3(texture(material.texture, Texcoord));
     vec3 norm = vec3(texture(material.normalMap, Texcoord));
     if(material.isAlien > 0.0){
       norm = normalize(Normal);
     }
	   // The diffuse shading equation, dot product gives us the cosine of angle between the vectors
     norm = normalize(norm*2.0-1.0);
	   float diff = max(dot(norm,lightDir), 0.0 );
	   vec3 diffuse = lightDiffuse *diff*vec3(texture(material.texture, Texcoord));
	   //specular lighting
	   vec3 reflectDir = reflect(-lightDir, norm);
	   float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
     vec3 specular = lightSpecular* spec* vec3(texture(material.specular,Texcoord));

     //alien lighting
     if(material.isAlien > 0.0) {
       specular = lightAmbient* spec*alienSpecular;
       diffuse = alienAmbient;
       ambient = alienAmbient;
     }

     //soften edges of the flashlight
     float innerRadius = dot(lightDir, normalize(-light.direction));
     float outerRadius = (light.cutOff - light.outerCutOff);
     float intensity = clamp((innerRadius - light.outerCutOff)/outerRadius, 0.0, 1.0);
     diffuse  = diffuse*intensity;
     specular = specular*intensity;
     //attenuation
     float distance = length(light.position - FragPos);
     float attenuation = 275.0 / (constant + linear * distance + quadratic * (distance * distance));
     ambient  *= attenuation;
     diffuse  *= attenuation;
     specular *= attenuation;

    //combine to phong lighting
	   vec3 LightIntensity = (ambient+diffuse+specular);
	   gl_FragColor =  vec4(LightIntensity,1.0);
}
